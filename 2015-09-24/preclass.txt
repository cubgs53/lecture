0.  How much time did you spend on this pre-class exercise, and when?

    1 hour on Sunday

1.  What are one or two points that you found least clear in the
    9/24 slide decks (including the narration)?

    Some of the pragma commands and syntax really confused me, especially when I started reading the omp_mc.c code. Does a critical section correspond to everything that follows a #pragma omp critical command? Does it correspond to only the line that follows it unless there are enclosing braces, like in if statements/for statements? I guess the syntax still is not obvious, I get the general idea, but the syntax/actual usage/examples have me confused.

2.  The omp_mc.c file in the demo subdirectory runs a Monte Carlo
    simulation to estimate the expected value of a uniform random
    variable.  The "-p" option sets the number of processors used,
    while "-b" sets the number of trials between synchronizations.

    a) Write a model for the run time for this simulation code in
       terms of the number of trials (N), number of processors (p),
       time per trial (t_trial), and time to update the global
       counters in the critical section (t_update).

       Reading over the code it seems like it should have the same model as the pthreads code as it has the same critical/global mutex section.

    b) Run the code with a few different parameter values in order
       to estimate N, t_trial, and t_update for this code on
       a totient compute node.

       This should be the same as before. Once again my model produces weird numbers

    c) Based on your model, suggest a strategy for choosing the batch
       size.  How might you generalize this strategy to automatically
       choose batch sizes for different types of computational
       experiments?

       Once again as the time in the critical section increases you want to do the critical time less often so you want to have larger batch sizes. If most of the time is spent in the parallel section then you won't be blocked on critical section if you do it more often and you can avoid doing extra computation by decreasing batch size.

3.  The "OpenMP pitfalls" paper describes some common pitfalls (both
    performance and correctness) in OpenMP codes.  Go through the
    checklist in the paper for omp_mc.c.  What performance mistakes
    are there in the demonstration implementation?

    - access to a shared variable (nbatch) is not protected. This probably doesn't matter though as nbatch doesn't change.
    - tnbatch is treated as a private variable but isn't declared as a private variable and thus is treated as shared.
    - I think the call to random could be atomic, but I'm not sure
